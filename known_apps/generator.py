#!/usr/bin/env python3

import sys
from os import path, linesep
from glob import iglob
from configparser import ConfigParser
from datetime import datetime


def fatal(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
    sys.exit(1)


def to_stringlist(arg):
    if len(arg) == 0:
        return []
    return [v.strip() for v in arg.split(',')]


def wrap_literals(arg, sep=' '):
    return (',' + sep).join([f'QStringLiteral("{v}")' for v in arg])


def wrap_list(arg):
    return f'QStringList{{{wrap_literals(arg)}}}'


def need_exclude(arg):
    res = []
    for v in arg:
        if path.basename(v).startswith('harbour-'):
            res.append(v)
    return res


def main():
    if len(sys.argv) != 2:
        fatal('Usage: generator <output_dir>')

    output_dir = sys.argv[1]
    if not path.isdir(output_dir):
        fatal('The argument must be a directory:', output_dir)

    known_apps = {}
    config = ConfigParser()

    for inipath in iglob(path.join(path.dirname(__file__), '*.ini')):
        config.read(inipath)
        for app in config.sections():
            if app in known_apps:
                source = known_apps[app]['source']
                fatal(f'Duplicate entry "{app}": first occurrence was "{source}" then "{path}"')
            app_dict = config[app]
            if not ('config' in app_dict or 'cache' in app_dict or 'local_data' in app_dict):
                fatal(f'{path}: none of config, cache or local_data is specified for "{app}"')
            known_apps[app] = {
                'source':     path,
                'config':     to_stringlist(app_dict.get('config', fallback='')),
                'cache':      to_stringlist(app_dict.get('cache', fallback='')),
                'local_data': to_stringlist(app_dict.get('local_data', fallback=''))
            }
        config.clear()

    config = None

    with open(path.join(output_dir, 'known_apps.hpp'), 'w') as writer:
        writer.write(f'''\
// Generated by "harbour-mashka/known_apps/generator.py" at {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}.
// Do not edit manually!

#pragma once

inline static QList<KnownApp> known_apps_initializer() {{
    return {{
''')

        exclude = []

        for name in sorted(known_apps.keys()):
            app = known_apps[name]
            writer.write(f'''\
        {{
            {wrap_literals([name])},
            {wrap_list(app['config'])},
            {wrap_list(app['cache'])},
            {wrap_list(app['local_data'])}
        }},
''')
            exclude += need_exclude(app['config'])
            exclude += need_exclude(app['cache'])
            exclude += need_exclude(app['local_data'])

        writer.write(f'''\
    }};
}}

inline static QStringList exclude_paths_initializer() {{
    return {{
        {wrap_literals(exclude, linesep + '        ')}
    }};
}}
''')


if __name__ == '__main__':
    main()
